{"version":3,"sources":["components/Title.js","components/Photo.js","components/PhotoWall.js","components/Archives/ArchiveWall.js","components/Main.js","serviceWorker.js","index.js"],"names":["Title","props","title","Photo","post","className","src","imageLink","alt","description","onClick","onRemovePhoto","PhotoWall","posts","map","index","key","ArchiveWall","Main","state","id","archivedPosts","removePost","bind","postRemoved","console","log","this","push","setState","filter","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0MAOeA,MALf,SAAeC,GACb,OACE,4BAAKA,EAAMC,QCmBAC,MArBf,SAAeF,GACX,IAAMG,EAAOH,EAAMG,KACnB,OACI,4BAAQC,UAAU,UACd,yBAAKA,UAAU,QAAQC,IAAKF,EAAKG,UAAWC,IAAKJ,EAAKK,cACtD,oCACI,2BACKL,EAAKK,cAGd,yBAAKJ,UAAU,oBACX,4BAAQA,UAAU,gBAAgBK,QAAW,WACzCT,EAAMU,cAAcP,KADxB,aCDDQ,MARf,SAAmBX,GACf,OACI,yBAAKI,UAAU,aACVJ,EAAMY,MAAMC,KAAI,SAACV,EAAMW,GAAP,OAAiB,kBAAC,EAAD,CAAOC,IAAKD,EAAOX,KAAMA,EAAMO,cAAiBV,EAAMU,qBCIrFM,ICsCAC,E,kDA3Cb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXN,MAAO,CAAC,CACNO,GAAI,IACJX,YAAa,sBACbF,UAAW,mPAER,CACHa,GAAI,IACJX,YAAa,YACbF,UAAW,qLAER,CACHa,GAAI,IACJX,YAAa,iBACbF,UAAW,kIAEbc,cAAe,IAEjB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBApBP,E,uDAsBAC,GAAa,IAAD,OACrBC,QAAQC,IAAIF,EAAYf,aACxBkB,KAAKR,MAAME,cAAcO,KAAKJ,GAC9BG,KAAKE,UAAS,SAACV,GAAD,MAAY,CACxBN,MAAOM,EAAMN,MAAMiB,QAAO,SAAA1B,GAAI,OAAIA,IAASoB,KAC3CH,cAAe,EAAKF,MAAME,kBAE5BI,QAAQC,IAAIC,KAAKR,MAAME,iB,+BAGvB,OACE,6BACE,kBAAC,EAAD,CAAOnB,MAAS,cAChB,kBAAC,EAAD,CAAWW,MAAQc,KAAKR,MAAMN,MAAOF,cAAiBgB,KAAKL,aAC3D,kC,GArCSS,aCOCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCANC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.310897e3.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nfunction Title(props){\n  return(\n    <h1>{props.title}</h1>\n  );\n}\nexport default Title;","import React, {Component} from 'react';\n\nfunction Photo(props){\n    const post = props.post;\n    return(\n        <figure className=\"figure\">\n            <img className=\"photo\" src={post.imageLink} alt={post.description}></img>\n            <figcaption>\n                <p>\n                    {post.description}\n                </p>\n            </figcaption>\n            <div className=\"button-container\">\n                <button className=\"remove-button\" onClick = {() =>{\n                    props.onRemovePhoto(post);\n                }} >\n                    Remove\n                </button>\n            </div>\n        </figure>\n    )\n}\n\nexport default Photo;","import React, {Component} from 'react';\nimport Photo from './Photo';\nimport PropTypes from 'prop-types';\n\nfunction PhotoWall(props){\n    return(\n        <div className=\"photoGrid\">\n            {props.posts.map((post, index) => <Photo key={index} post={post} onRemovePhoto = {props.onRemovePhoto} />)}\n        </div>\n    )\n}\n\nexport default PhotoWall;","import React, {Component} from 'react';\nimport ArchivePhoto from './ArchivePhoto';\n\nfunction ArchiveWall(props){\n    return(\n        <div className=\"photoGrid\">\n            {props.archivedPosts.map((archivePost, index) => <ArchivePhoto key={index} archivePost={archivePost} />)}\n        </div>\n    )\n}\n\nexport default ArchiveWall;","import React, {Component} from 'react';\nimport Title from './Title';\nimport PhotoWall from './PhotoWall';\nimport ArchiveWall from './Archives/ArchiveWall';\n\nclass Main extends Component{\n  constructor(){\n    super()\n    this.state = {\n      posts :[{\n        id: \"0\",\n        description: \"beautiful landscape\",\n        imageLink: \"https://image.jimcdn.com/app/cms/image/transf/none/path/sa6549607c78f5c11/image/i4eeacaa2dbf12d6d/version/1490299332/most-beautiful-landscapes-in-europe-lofoten-european-best-destinations-copyright-iakov-kalinin.jpg\" +\n        \"3919321_1443393332_n.jpg\"\n        }, {\n        id: \"1\",\n        description: \"Aliens???\",\n        imageLink: \"https://img.purch.com/rc/640x415/aHR0cDovL3d3dy5zcGFjZS5jb20vaW1hZ2VzL2kvMDAwLzA3Mi84NTEvb3JpZ2luYWwvc3BhY2V4LWlyaWRpdW00LWxhdW5jaC10YXJpcS1tYWxpay5qcGc=\" +\n        \"08323785_735653395_n.jpg\"\n        }, {\n        id: \"2\",\n        description: \"On a vacation!\",\n        imageLink: \"https://fm.cnbc.com/applications/cnbc.com/resources/img/editorial/2017/08/24/104670887-VacationExplainsTHUMBWEB.1910x1000.jpg\"\n      }],\n      archivedPosts :[]\n    }\n    this.removePost = this.removePost.bind(this)\n  }\n    removePost(postRemoved){\n      console.log(postRemoved.description);\n      this.state.archivedPosts.push(postRemoved)\n      this.setState((state) => ({\n        posts: state.posts.filter(post => post !== postRemoved),\n        archivedPosts: this.state.archivedPosts\n      }))\n      console.log(this.state.archivedPosts);\n    }\n    render(){\n      return(\n        <div>\n          <Title title = {'Photowall'} />\n          <PhotoWall posts= {this.state.posts} onRemovePhoto = {this.removePost} />\n          <br />\n          {/*<ArchiveWall archivedPosts= {this.state.archivedPosts} />*/}\n        </div>\n      );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/styles.css';\n\n/*\nDEFAULT REACT ELEMENTS RENDER\nconst element = React.createElement('ol', null, \n  tasks.map((task, index) =>  React.createElement('li', {key: index}, task))\n);\nconst jsxElement = \n    <div>\n      <h3>React (Create)Elements Render</h3>\n        {element}\n      <h3>JSX Elements Render</h3>\n    </div>;*/\n\nReactDOM.render(\n <Main />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}